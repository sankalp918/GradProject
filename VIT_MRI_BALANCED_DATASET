{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sankalp918/GradProject/blob/main/VIT_MRI_BALANCED_DATASET\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "VIT Model trained on Brain MRI for stroke classification."
      ],
      "metadata": {
        "id": "JhiMn2gvdrkE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import torch.optim as optim\n",
        "import torchvision.transforms as transforms\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "from sklearn.model_selection import train_test_split  # <-- Add this\n",
        "from transformers import ViTForImageClassification, ViTConfig  # Required for ViT\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Set device\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "print(f\"Using device: {device}\")\n",
        "\n",
        "class BrainCTDataset(Dataset):\n",
        "    def __init__(self, image_paths, labels, transform=None):\n",
        "        self.image_paths = image_paths\n",
        "        self.labels = labels\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.image_paths)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        image_path = self.image_paths[idx]\n",
        "        image = Image.open(image_path).convert('RGB')\n",
        "        label = self.labels[idx]\n",
        "\n",
        "        if self.transform:\n",
        "            image = self.transform(image)\n",
        "\n",
        "        return image, label\n",
        "\n",
        "def load_dataset(data_dir):\n",
        "    \"\"\"\n",
        "    Load dataset from directory structure:\n",
        "    data_dir/\n",
        "        Stroke/\n",
        "            image1.jpg\n",
        "            image2.jpg\n",
        "        Normal/\n",
        "            image1.jpg\n",
        "            image2.jpg\n",
        "    \"\"\"\n",
        "    image_paths = []\n",
        "    labels = []\n",
        "    class_names = ['Haemorrhagic', 'Ischemic', 'Normal']\n",
        "\n",
        "    for class_idx, class_name in enumerate(class_names):\n",
        "        class_dir = os.path.join(data_dir, class_name)\n",
        "        if os.path.exists(class_dir):\n",
        "            for img_name in os.listdir(class_dir):\n",
        "                if img_name.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):\n",
        "                    image_paths.append(os.path.join(class_dir, img_name))\n",
        "                    labels.append(class_idx)\n",
        "\n",
        "    return image_paths, labels, class_names\n",
        "\n",
        "def create_data_augmentation():\n",
        "    \"\"\"Create comprehensive data augmentation for medical images\"\"\"\n",
        "\n",
        "    # Training augmentation - aggressive for small datasets\n",
        "    train_transform = transforms.Compose([\n",
        "        transforms.Resize((224, 224)),\n",
        "        transforms.RandomRotation(15),  # Small rotation for medical images\n",
        "        transforms.RandomHorizontalFlip(p=0.5),\n",
        "        transforms.RandomVerticalFlip(p=0.3),  # Medical images can be flipped vertically\n",
        "        transforms.RandomAffine(degrees=0, translate=(0.1, 0.1), scale=(0.9, 1.1)),\n",
        "        transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.1, hue=0.05),\n",
        "        transforms.RandomGrayscale(p=0.1),\n",
        "        transforms.ToTensor(),  # Convert to tensor BEFORE tensor-only transforms\n",
        "        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
        "        transforms.GaussianBlur(kernel_size=3, sigma=(0.1, 2.0)),  # Move after ToTensor\n",
        "        transforms.RandomErasing(p=0.2, scale=(0.02, 0.1)),  # Move after ToTensor\n",
        "    ])\n",
        "\n",
        "    # Validation/Test transform - no augmentation\n",
        "    val_transform = transforms.Compose([\n",
        "        transforms.Resize((224, 224)),\n",
        "        transforms.ToTensor(),\n",
        "        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n",
        "    ])\n",
        "\n",
        "    return train_transform, val_transform\n",
        "\n",
        "def split_data(image_paths, labels, test_size=0.2, val_size=0.2, random_state=42):\n",
        "    \"\"\"Split data into train, validation, and test sets\"\"\"\n",
        "\n",
        "    # First split: train+val vs test\n",
        "    X_temp, X_test, y_temp, y_test = train_test_split(\n",
        "        image_paths, labels, test_size=test_size,\n",
        "        random_state=random_state, stratify=labels\n",
        "    )\n",
        "\n",
        "    # Second split: train vs val\n",
        "    val_ratio = val_size / (1 - test_size)\n",
        "    X_train, X_val, y_train, y_val = train_test_split(\n",
        "        X_temp, y_temp, test_size=val_ratio,\n",
        "        random_state=random_state, stratify=y_temp\n",
        "    )\n",
        "\n",
        "    print(f\"Dataset split:\")\n",
        "    print(f\"Train: {len(X_train)} images\")\n",
        "    print(f\"Validation: {len(X_val)} images\")\n",
        "    print(f\"Test: {len(X_test)} images\")\n",
        "\n",
        "    return X_train, X_val, X_test, y_train, y_val, y_test\n",
        "\n",
        "class ViTBrainClassifier(nn.Module):\n",
        "    def __init__(self, num_classes=2, pretrained=True):\n",
        "        super(ViTBrainClassifier, self).__init__()\n",
        "\n",
        "        if pretrained:\n",
        "            # Use pre-trained ViT-Base\n",
        "            self.vit = ViTForImageClassification.from_pretrained(\n",
        "                'google/vit-base-patch16-224',\n",
        "                num_labels=num_classes,\n",
        "                ignore_mismatched_sizes=True\n",
        "            )\n",
        "        else:\n",
        "            # Create ViT from scratch (for very small datasets)\n",
        "            config = ViTConfig(\n",
        "                image_size=224,\n",
        "                patch_size=16,\n",
        "                num_channels=3,\n",
        "                num_classes=num_classes,\n",
        "                hidden_size=768,\n",
        "                num_hidden_layers=12,\n",
        "                num_attention_heads=12,\n",
        "                intermediate_size=3072\n",
        "            )\n",
        "            self.vit = ViTForImageClassification(config)\n",
        "\n",
        "    def forward(self, x):\n",
        "        outputs = self.vit(x)\n",
        "        return outputs.logits\n",
        "\n",
        "def train_model(model, train_loader, val_loader, num_epochs=25, learning_rate=1e-4):\n",
        "    \"\"\"Train the ViT model with early stopping\"\"\"\n",
        "\n",
        "    # Loss and optimizer\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=0.01)\n",
        "\n",
        "    # Learning rate scheduler\n",
        "    scheduler = optim.lr_scheduler.ReduceLROnPlateau(\n",
        "        optimizer, mode='min', patience=5, factor=0.5\n",
        "    )\n",
        "\n",
        "    # Training history\n",
        "    train_losses = []\n",
        "    train_accuracies = []\n",
        "    val_losses = []\n",
        "    val_accuracies = []\n",
        "\n",
        "    best_val_acc = 0.0\n",
        "    patience_counter = 0\n",
        "    patience = 10\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "        print(f\"Starting epoch {epoch+1}/{num_epochs}...\")\n",
        "\n",
        "        # Training phase\n",
        "        model.train()\n",
        "        train_loss = 0.0\n",
        "        train_correct = 0\n",
        "        train_total = 0\n",
        "\n",
        "        print(f\"Starting training loop with {len(train_loader)} batches...\")\n",
        "\n",
        "        for batch_idx, (images, labels) in enumerate(train_loader):\n",
        "            if batch_idx == 0:\n",
        "                print(f\"Successfully loaded first batch: images shape {images.shape}, labels shape {labels.shape}\")\n",
        "\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(images)\n",
        "            loss = criterion(outputs, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            train_loss += loss.item()\n",
        "            _, predicted = torch.max(outputs.data, 1)\n",
        "            train_total += labels.size(0)\n",
        "            train_correct += (predicted == labels).sum().item()\n",
        "\n",
        "            if batch_idx % 10 == 0:\n",
        "                print(f'Epoch {epoch+1}/{num_epochs}, Batch {batch_idx+1}/{len(train_loader)}, Loss: {loss.item():.4f}')\n",
        "\n",
        "        # Validation phase\n",
        "        model.eval()\n",
        "        val_loss = 0.0\n",
        "        val_correct = 0\n",
        "        val_total = 0\n",
        "\n",
        "        with torch.no_grad():\n",
        "            for images, labels in val_loader:\n",
        "                images, labels = images.to(device), labels.to(device)\n",
        "                outputs = model(images)\n",
        "                loss = criterion(outputs, labels)\n",
        "\n",
        "                val_loss += loss.item()\n",
        "                _, predicted = torch.max(outputs.data, 1)\n",
        "                val_total += labels.size(0)\n",
        "                val_correct += (predicted == labels).sum().item()\n",
        "\n",
        "        # Calculate metrics\n",
        "        train_acc = 100 * train_correct / train_total\n",
        "        val_acc = 100 * val_correct / val_total\n",
        "        avg_train_loss = train_loss / len(train_loader)\n",
        "        avg_val_loss = val_loss / len(val_loader)\n",
        "\n",
        "        train_losses.append(avg_train_loss)\n",
        "        train_accuracies.append(train_acc)\n",
        "        val_losses.append(avg_val_loss)\n",
        "        val_accuracies.append(val_acc)\n",
        "\n",
        "        print(f'Epoch {epoch+1}/{num_epochs}:')\n",
        "        print(f'Train Loss: {avg_train_loss:.4f}, Train Acc: {train_acc:.2f}%')\n",
        "        print(f'Val Loss: {avg_val_loss:.4f}, Val Acc: {val_acc:.2f}%')\n",
        "        print('-' * 60)\n",
        "\n",
        "        # Learning rate scheduling\n",
        "        scheduler.step(avg_val_loss)\n",
        "\n",
        "        # Early stopping and model saving\n",
        "        if val_acc > best_val_acc:\n",
        "            best_val_acc = val_acc\n",
        "            torch.save(model.state_dict(), 'Aug_dataset_vit_stroke_mri.pth')\n",
        "            patience_counter = 0\n",
        "        else:\n",
        "            patience_counter += 1\n",
        "\n",
        "        if patience_counter >= patience:\n",
        "            print(f'Early stopping at epoch {epoch+1}')\n",
        "            break\n",
        "\n",
        "    return train_losses, train_accuracies, val_losses, val_accuracies\n",
        "\n",
        "def evaluate_model(model, test_loader, class_names):\n",
        "    \"\"\"Evaluate the model on test set\"\"\"\n",
        "    model.eval()\n",
        "    all_predictions = []\n",
        "    all_labels = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for images, labels in test_loader:\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "            outputs = model(images)\n",
        "            _, predicted = torch.max(outputs, 1)\n",
        "\n",
        "            all_predictions.extend(predicted.cpu().numpy())\n",
        "            all_labels.extend(labels.cpu().numpy())\n",
        "\n",
        "    # Calculate metrics\n",
        "    accuracy = accuracy_score(all_labels, all_predictions)\n",
        "    print(f\"Test Accuracy: {accuracy:.4f}\")\n",
        "    print(\"\\nClassification Report:\")\n",
        "    print(classification_report(all_labels, all_predictions, target_names=class_names))\n",
        "\n",
        "    # Confusion Matrix\n",
        "    cm = confusion_matrix(all_labels, all_predictions)\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
        "                xticklabels=class_names, yticklabels=class_names)\n",
        "    plt.title('Confusion Matrix')\n",
        "    plt.ylabel('True Label')\n",
        "    plt.xlabel('Predicted Label')\n",
        "    plt.show()\n",
        "\n",
        "    return accuracy\n",
        "\n",
        "def plot_training_history(train_losses, train_accuracies, val_losses, val_accuracies):\n",
        "    \"\"\"Plot training history\"\"\"\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n",
        "\n",
        "    # Loss plot\n",
        "    ax1.plot(train_losses, label='Training Loss')\n",
        "    ax1.plot(val_losses, label='Validation Loss')\n",
        "    ax1.set_title('Model Loss')\n",
        "    ax1.set_xlabel('Epoch')\n",
        "    ax1.set_ylabel('Loss')\n",
        "    ax1.legend()\n",
        "    ax1.grid(True)\n",
        "\n",
        "    # Accuracy plot\n",
        "    ax2.plot(train_accuracies, label='Training Accuracy')\n",
        "    ax2.plot(val_accuracies, label='Validation Accuracy')\n",
        "    ax2.set_title('Model Accuracy')\n",
        "    ax2.set_xlabel('Epoch')\n",
        "    ax2.set_ylabel('Accuracy (%)')\n",
        "    ax2.legend()\n",
        "    ax2.grid(True)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "def main():\n",
        "    # Configuration\n",
        "    DATA_DIR = \"/content/drive/MyDrive/augmented_dataset\"  # Update this path\n",
        "    BATCH_SIZE = 256  # Small batch size for small datasets\n",
        "    NUM_EPOCHS = 25\n",
        "    LEARNING_RATE = 1e-4\n",
        "\n",
        "    # Load dataset\n",
        "    print(\"Loading dataset...\")\n",
        "    image_paths, labels, class_names = load_dataset(DATA_DIR)\n",
        "    print(f\"Total images: {len(image_paths)}\")\n",
        "    print(f\"Classes: {class_names}\")\n",
        "    print(f\"Class distribution: Haemorrhagic: {labels.count(0)}, Ischemic: {labels.count(1)}, Normal: {labels.count(2)}\")\n",
        "\n",
        "    # Split dataset\n",
        "    X_train, X_val, X_test, y_train, y_val, y_test = split_data(image_paths, labels)\n",
        "\n",
        "    # Create data transforms\n",
        "    train_transform, val_transform = create_data_augmentation()\n",
        "\n",
        "    # Create datasets\n",
        "    train_dataset = BrainCTDataset(X_train, y_train, transform=train_transform)\n",
        "    val_dataset = BrainCTDataset(X_val, y_val, transform=val_transform)\n",
        "    test_dataset = BrainCTDataset(X_test, y_test, transform=val_transform)\n",
        "\n",
        "    # Create data loaders\n",
        "    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=16, pin_memory=True)\n",
        "    val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=16, pin_memory=True)\n",
        "    test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=16, pin_memory=True)\n",
        "\n",
        "\n",
        "    # Create model\n",
        "    print(\"Creating ViT model...\")\n",
        "    model = ViTBrainClassifier(num_classes=len(class_names), pretrained=True)\n",
        "    model = model.to(device)\n",
        "\n",
        "    # Print model info\n",
        "    total_params = sum(p.numel() for p in model.parameters())\n",
        "    trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
        "    print(f\"Total parameters: {total_params:,}\")\n",
        "    print(f\"Trainable parameters: {trainable_params:,}\")\n",
        "\n",
        "    # Train model\n",
        "    print(\"Starting training...\")\n",
        "    train_losses, train_accs, val_losses, val_accs = train_model(\n",
        "        model, train_loader, val_loader, NUM_EPOCHS, LEARNING_RATE\n",
        "    )\n",
        "\n",
        "    # Plot training history\n",
        "    plot_training_history(train_losses, train_accs, val_losses, val_accs)\n",
        "\n",
        "    # Load best model and evaluate\n",
        "    print(\"Loading best model for evaluation...\")\n",
        "    model.load_state_dict(torch.load('Aug_dataset_vit_stroke_mri.pth'))\n",
        "    test_accuracy = evaluate_model(model, test_loader, class_names)\n",
        "\n",
        "    print(f\"Final Test Accuracy: {test_accuracy:.4f}\")\n",
        "    torch.save(model.state_dict(), 'Aug_dataset_vit_stroke_mri.pth')\n",
        "    torch.save(model, 'Aug_dataset_vit_stroke_mri.h5')\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n",
        "\n",
        "# Additional utility functions for small datasets\n",
        "\n",
        "def create_weighted_sampler(labels):\n",
        "    \"\"\"Create weighted sampler for imbalanced datasets\"\"\"\n",
        "    from torch.utils.data import WeightedRandomSampler\n",
        "\n",
        "    class_counts = np.bincount(labels)\n",
        "    class_weights = 1.0 / class_counts\n",
        "    sample_weights = [class_weights[label] for label in labels]\n",
        "\n",
        "    return WeightedRandomSampler(\n",
        "        weights=sample_weights,\n",
        "        num_samples=len(sample_weights),\n",
        "        replacement=True\n",
        "    )\n",
        "\n",
        "def apply_mixup(data, targets, alpha=0.2):\n",
        "    \"\"\"Apply MixUp augmentation for small datasets\"\"\"\n",
        "    if alpha > 0:\n",
        "        lam = np.random.beta(alpha, alpha)\n",
        "    else:\n",
        "        lam = 1\n",
        "\n",
        "    batch_size = data.size(0)\n",
        "    index = torch.randperm(batch_size)\n",
        "\n",
        "    mixed_data = lam * data + (1 - lam) * data[index, :]\n",
        "    targets_a, targets_b = targets, targets[index]\n",
        "\n",
        "    return mixed_data, targets_a, targets_b, lam\n",
        "\n",
        "def focal_loss(inputs, targets, alpha=1, gamma=2):\n",
        "    \"\"\"Focal loss for handling class imbalance\"\"\"\n",
        "    ce_loss = nn.CrossEntropyLoss(reduction='none')(inputs, targets)\n",
        "    pt = torch.exp(-ce_loss)\n",
        "    focal_loss = alpha * (1 - pt) ** gamma * ce_loss\n",
        "    return focal_loss.mean()\n",
        "\n",
        "# Example usage for very small datasets (< 100 images):\n",
        "def small_dataset_modifications():\n",
        "    \"\"\"\n",
        "    For very small datasets, consider these modifications:\n",
        "\n",
        "    1. Use stronger data augmentation\n",
        "    2. Reduce model size or use smaller ViT variants\n",
        "    3. Apply transfer learning with frozen early layers\n",
        "    4. Use techniques like MixUp, CutMix\n",
        "    5. Apply focal loss for class imbalance\n",
        "    6. Use k-fold cross-validation instead of single split\n",
        "    \"\"\"\n",
        "\n",
        "    # Example: Freeze early layers for transfer learning\n",
        "    def freeze_early_layers(model, num_layers_to_freeze=6):\n",
        "        for i, (name, param) in enumerate(model.vit.vit.encoder.layer.named_parameters()):\n",
        "            if i < num_layers_to_freeze:\n",
        "                param.requires_grad = False\n",
        "\n",
        "    # Example: Use smaller learning rate and longer training\n",
        "    optimizer_config = {\n",
        "        'lr': 5e-5,  # Smaller learning rate\n",
        "        'weight_decay': 0.01,\n",
        "        'eps': 1e-8\n",
        "    }\n",
        "\n",
        "    return optimizer_config"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uKEg_92Ad1ls",
        "outputId": "e9a82967-fe58-4b84-c7c5-c014df336eb1"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cuda\n",
            "Loading dataset...\n",
            "Total images: 108000\n",
            "Classes: ['Haemorrhagic', 'Ischemic', 'Normal']\n",
            "Class distribution: Haemorrhagic: 36000, Ischemic: 36000, Normal: 36000\n",
            "Dataset split:\n",
            "Train: 64800 images\n",
            "Validation: 21600 images\n",
            "Test: 21600 images\n",
            "Creating ViT model...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of ViTForImageClassification were not initialized from the model checkpoint at google/vit-base-patch16-224 and are newly initialized because the shapes did not match:\n",
            "- classifier.bias: found shape torch.Size([1000]) in the checkpoint and torch.Size([3]) in the model instantiated\n",
            "- classifier.weight: found shape torch.Size([1000, 768]) in the checkpoint and torch.Size([3, 768]) in the model instantiated\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total parameters: 85,800,963\n",
            "Trainable parameters: 85,800,963\n",
            "Starting training...\n",
            "Starting epoch 1/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 1/25, Batch 1/254, Loss: 1.1204\n",
            "Epoch 1/25, Batch 11/254, Loss: 0.6636\n",
            "Epoch 1/25, Batch 21/254, Loss: 0.4582\n",
            "Epoch 1/25, Batch 31/254, Loss: 0.4842\n",
            "Epoch 1/25, Batch 41/254, Loss: 0.3635\n",
            "Epoch 1/25, Batch 51/254, Loss: 0.2887\n",
            "Epoch 1/25, Batch 61/254, Loss: 0.2636\n",
            "Epoch 1/25, Batch 71/254, Loss: 0.2335\n",
            "Epoch 1/25, Batch 81/254, Loss: 0.2117\n",
            "Epoch 1/25, Batch 91/254, Loss: 0.2082\n",
            "Epoch 1/25, Batch 101/254, Loss: 0.1738\n",
            "Epoch 1/25, Batch 111/254, Loss: 0.1964\n",
            "Epoch 1/25, Batch 121/254, Loss: 0.1328\n",
            "Epoch 1/25, Batch 131/254, Loss: 0.1406\n",
            "Epoch 1/25, Batch 141/254, Loss: 0.1800\n",
            "Epoch 1/25, Batch 151/254, Loss: 0.1041\n",
            "Epoch 1/25, Batch 161/254, Loss: 0.1024\n",
            "Epoch 1/25, Batch 171/254, Loss: 0.1142\n",
            "Epoch 1/25, Batch 181/254, Loss: 0.1022\n",
            "Epoch 1/25, Batch 191/254, Loss: 0.1383\n",
            "Epoch 1/25, Batch 201/254, Loss: 0.0962\n",
            "Epoch 1/25, Batch 211/254, Loss: 0.0909\n",
            "Epoch 1/25, Batch 221/254, Loss: 0.1027\n",
            "Epoch 1/25, Batch 231/254, Loss: 0.1012\n",
            "Epoch 1/25, Batch 241/254, Loss: 0.0624\n",
            "Epoch 1/25, Batch 251/254, Loss: 0.0662\n",
            "Epoch 1/25:\n",
            "Train Loss: 0.2222, Train Acc: 90.69%\n",
            "Val Loss: 0.0897, Val Acc: 96.68%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 2/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 2/25, Batch 1/254, Loss: 0.1112\n",
            "Epoch 2/25, Batch 11/254, Loss: 0.0645\n",
            "Epoch 2/25, Batch 21/254, Loss: 0.0427\n",
            "Epoch 2/25, Batch 31/254, Loss: 0.0450\n",
            "Epoch 2/25, Batch 41/254, Loss: 0.0713\n",
            "Epoch 2/25, Batch 51/254, Loss: 0.0539\n",
            "Epoch 2/25, Batch 61/254, Loss: 0.1244\n",
            "Epoch 2/25, Batch 71/254, Loss: 0.0759\n",
            "Epoch 2/25, Batch 81/254, Loss: 0.0648\n",
            "Epoch 2/25, Batch 91/254, Loss: 0.0644\n",
            "Epoch 2/25, Batch 101/254, Loss: 0.0993\n",
            "Epoch 2/25, Batch 111/254, Loss: 0.0534\n",
            "Epoch 2/25, Batch 121/254, Loss: 0.0488\n",
            "Epoch 2/25, Batch 131/254, Loss: 0.0464\n",
            "Epoch 2/25, Batch 141/254, Loss: 0.1100\n",
            "Epoch 2/25, Batch 151/254, Loss: 0.0404\n",
            "Epoch 2/25, Batch 161/254, Loss: 0.0402\n",
            "Epoch 2/25, Batch 171/254, Loss: 0.0755\n",
            "Epoch 2/25, Batch 181/254, Loss: 0.0412\n",
            "Epoch 2/25, Batch 191/254, Loss: 0.0812\n",
            "Epoch 2/25, Batch 201/254, Loss: 0.0820\n",
            "Epoch 2/25, Batch 211/254, Loss: 0.0445\n",
            "Epoch 2/25, Batch 221/254, Loss: 0.0365\n",
            "Epoch 2/25, Batch 231/254, Loss: 0.0372\n",
            "Epoch 2/25, Batch 241/254, Loss: 0.0480\n",
            "Epoch 2/25, Batch 251/254, Loss: 0.1331\n",
            "Epoch 2/25:\n",
            "Train Loss: 0.0602, Train Acc: 97.76%\n",
            "Val Loss: 0.0787, Val Acc: 96.88%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 3/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 3/25, Batch 1/254, Loss: 0.1004\n",
            "Epoch 3/25, Batch 11/254, Loss: 0.0995\n",
            "Epoch 3/25, Batch 21/254, Loss: 0.0303\n",
            "Epoch 3/25, Batch 31/254, Loss: 0.0323\n",
            "Epoch 3/25, Batch 41/254, Loss: 0.0352\n",
            "Epoch 3/25, Batch 51/254, Loss: 0.0501\n",
            "Epoch 3/25, Batch 61/254, Loss: 0.0626\n",
            "Epoch 3/25, Batch 71/254, Loss: 0.0479\n",
            "Epoch 3/25, Batch 81/254, Loss: 0.0586\n",
            "Epoch 3/25, Batch 91/254, Loss: 0.0532\n",
            "Epoch 3/25, Batch 101/254, Loss: 0.0206\n",
            "Epoch 3/25, Batch 111/254, Loss: 0.0450\n",
            "Epoch 3/25, Batch 121/254, Loss: 0.0378\n",
            "Epoch 3/25, Batch 131/254, Loss: 0.0526\n",
            "Epoch 3/25, Batch 141/254, Loss: 0.0466\n",
            "Epoch 3/25, Batch 151/254, Loss: 0.0488\n",
            "Epoch 3/25, Batch 161/254, Loss: 0.0097\n",
            "Epoch 3/25, Batch 171/254, Loss: 0.0267\n",
            "Epoch 3/25, Batch 181/254, Loss: 0.0218\n",
            "Epoch 3/25, Batch 191/254, Loss: 0.0217\n",
            "Epoch 3/25, Batch 201/254, Loss: 0.0541\n",
            "Epoch 3/25, Batch 211/254, Loss: 0.0188\n",
            "Epoch 3/25, Batch 221/254, Loss: 0.0209\n",
            "Epoch 3/25, Batch 231/254, Loss: 0.0366\n",
            "Epoch 3/25, Batch 241/254, Loss: 0.0999\n",
            "Epoch 3/25, Batch 251/254, Loss: 0.0269\n",
            "Epoch 3/25:\n",
            "Train Loss: 0.0412, Train Acc: 98.46%\n",
            "Val Loss: 0.0697, Val Acc: 97.36%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 4/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 4/25, Batch 1/254, Loss: 0.0469\n",
            "Epoch 4/25, Batch 11/254, Loss: 0.0294\n",
            "Epoch 4/25, Batch 21/254, Loss: 0.0564\n",
            "Epoch 4/25, Batch 31/254, Loss: 0.0134\n",
            "Epoch 4/25, Batch 41/254, Loss: 0.0225\n",
            "Epoch 4/25, Batch 51/254, Loss: 0.0187\n",
            "Epoch 4/25, Batch 61/254, Loss: 0.0297\n",
            "Epoch 4/25, Batch 71/254, Loss: 0.0347\n",
            "Epoch 4/25, Batch 81/254, Loss: 0.0543\n",
            "Epoch 4/25, Batch 91/254, Loss: 0.0062\n",
            "Epoch 4/25, Batch 101/254, Loss: 0.0174\n",
            "Epoch 4/25, Batch 111/254, Loss: 0.0281\n",
            "Epoch 4/25, Batch 121/254, Loss: 0.0114\n",
            "Epoch 4/25, Batch 131/254, Loss: 0.0217\n",
            "Epoch 4/25, Batch 141/254, Loss: 0.0180\n",
            "Epoch 4/25, Batch 151/254, Loss: 0.0289\n",
            "Epoch 4/25, Batch 161/254, Loss: 0.0279\n",
            "Epoch 4/25, Batch 171/254, Loss: 0.0374\n",
            "Epoch 4/25, Batch 181/254, Loss: 0.0502\n",
            "Epoch 4/25, Batch 191/254, Loss: 0.0390\n",
            "Epoch 4/25, Batch 201/254, Loss: 0.0111\n",
            "Epoch 4/25, Batch 211/254, Loss: 0.0281\n",
            "Epoch 4/25, Batch 221/254, Loss: 0.0337\n",
            "Epoch 4/25, Batch 231/254, Loss: 0.0312\n",
            "Epoch 4/25, Batch 241/254, Loss: 0.0214\n",
            "Epoch 4/25, Batch 251/254, Loss: 0.0415\n",
            "Epoch 4/25:\n",
            "Train Loss: 0.0289, Train Acc: 98.94%\n",
            "Val Loss: 0.0188, Val Acc: 99.38%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 5/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 5/25, Batch 1/254, Loss: 0.0084\n",
            "Epoch 5/25, Batch 11/254, Loss: 0.0125\n",
            "Epoch 5/25, Batch 21/254, Loss: 0.0128\n",
            "Epoch 5/25, Batch 31/254, Loss: 0.0364\n",
            "Epoch 5/25, Batch 41/254, Loss: 0.0260\n",
            "Epoch 5/25, Batch 51/254, Loss: 0.0184\n",
            "Epoch 5/25, Batch 61/254, Loss: 0.0290\n",
            "Epoch 5/25, Batch 71/254, Loss: 0.0586\n",
            "Epoch 5/25, Batch 81/254, Loss: 0.0098\n",
            "Epoch 5/25, Batch 91/254, Loss: 0.0138\n",
            "Epoch 5/25, Batch 101/254, Loss: 0.0329\n",
            "Epoch 5/25, Batch 111/254, Loss: 0.0142\n",
            "Epoch 5/25, Batch 121/254, Loss: 0.0350\n",
            "Epoch 5/25, Batch 131/254, Loss: 0.0059\n",
            "Epoch 5/25, Batch 141/254, Loss: 0.0083\n",
            "Epoch 5/25, Batch 151/254, Loss: 0.0364\n",
            "Epoch 5/25, Batch 161/254, Loss: 0.0182\n",
            "Epoch 5/25, Batch 171/254, Loss: 0.0338\n",
            "Epoch 5/25, Batch 181/254, Loss: 0.0119\n",
            "Epoch 5/25, Batch 191/254, Loss: 0.0393\n",
            "Epoch 5/25, Batch 201/254, Loss: 0.0357\n",
            "Epoch 5/25, Batch 211/254, Loss: 0.0042\n",
            "Epoch 5/25, Batch 221/254, Loss: 0.0073\n",
            "Epoch 5/25, Batch 231/254, Loss: 0.0465\n",
            "Epoch 5/25, Batch 241/254, Loss: 0.0283\n",
            "Epoch 5/25, Batch 251/254, Loss: 0.0650\n",
            "Epoch 5/25:\n",
            "Train Loss: 0.0262, Train Acc: 99.05%\n",
            "Val Loss: 0.0398, Val Acc: 98.61%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 6/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 6/25, Batch 1/254, Loss: 0.0372\n",
            "Epoch 6/25, Batch 11/254, Loss: 0.0307\n",
            "Epoch 6/25, Batch 21/254, Loss: 0.0292\n",
            "Epoch 6/25, Batch 31/254, Loss: 0.0323\n",
            "Epoch 6/25, Batch 41/254, Loss: 0.0318\n",
            "Epoch 6/25, Batch 51/254, Loss: 0.0176\n",
            "Epoch 6/25, Batch 61/254, Loss: 0.0263\n",
            "Epoch 6/25, Batch 71/254, Loss: 0.0318\n",
            "Epoch 6/25, Batch 81/254, Loss: 0.0555\n",
            "Epoch 6/25, Batch 91/254, Loss: 0.0456\n",
            "Epoch 6/25, Batch 101/254, Loss: 0.0241\n",
            "Epoch 6/25, Batch 111/254, Loss: 0.0468\n",
            "Epoch 6/25, Batch 121/254, Loss: 0.0057\n",
            "Epoch 6/25, Batch 131/254, Loss: 0.0344\n",
            "Epoch 6/25, Batch 141/254, Loss: 0.0033\n",
            "Epoch 6/25, Batch 151/254, Loss: 0.0260\n",
            "Epoch 6/25, Batch 161/254, Loss: 0.0351\n",
            "Epoch 6/25, Batch 171/254, Loss: 0.0304\n",
            "Epoch 6/25, Batch 181/254, Loss: 0.0116\n",
            "Epoch 6/25, Batch 191/254, Loss: 0.0405\n",
            "Epoch 6/25, Batch 201/254, Loss: 0.0080\n",
            "Epoch 6/25, Batch 211/254, Loss: 0.0057\n",
            "Epoch 6/25, Batch 221/254, Loss: 0.0116\n",
            "Epoch 6/25, Batch 231/254, Loss: 0.0163\n",
            "Epoch 6/25, Batch 241/254, Loss: 0.0415\n",
            "Epoch 6/25, Batch 251/254, Loss: 0.0274\n",
            "Epoch 6/25:\n",
            "Train Loss: 0.0225, Train Acc: 99.23%\n",
            "Val Loss: 0.0329, Val Acc: 98.94%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 7/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 7/25, Batch 1/254, Loss: 0.0369\n",
            "Epoch 7/25, Batch 11/254, Loss: 0.0130\n",
            "Epoch 7/25, Batch 21/254, Loss: 0.0138\n",
            "Epoch 7/25, Batch 31/254, Loss: 0.0417\n",
            "Epoch 7/25, Batch 41/254, Loss: 0.0316\n",
            "Epoch 7/25, Batch 51/254, Loss: 0.0219\n",
            "Epoch 7/25, Batch 61/254, Loss: 0.0104\n",
            "Epoch 7/25, Batch 71/254, Loss: 0.0110\n",
            "Epoch 7/25, Batch 81/254, Loss: 0.0387\n",
            "Epoch 7/25, Batch 91/254, Loss: 0.0173\n",
            "Epoch 7/25, Batch 101/254, Loss: 0.0067\n",
            "Epoch 7/25, Batch 111/254, Loss: 0.0139\n",
            "Epoch 7/25, Batch 121/254, Loss: 0.0286\n",
            "Epoch 7/25, Batch 131/254, Loss: 0.0018\n",
            "Epoch 7/25, Batch 141/254, Loss: 0.0036\n",
            "Epoch 7/25, Batch 151/254, Loss: 0.0299\n",
            "Epoch 7/25, Batch 161/254, Loss: 0.0074\n",
            "Epoch 7/25, Batch 171/254, Loss: 0.0386\n",
            "Epoch 7/25, Batch 181/254, Loss: 0.0514\n",
            "Epoch 7/25, Batch 191/254, Loss: 0.0308\n",
            "Epoch 7/25, Batch 201/254, Loss: 0.0972\n",
            "Epoch 7/25, Batch 211/254, Loss: 0.0413\n",
            "Epoch 7/25, Batch 221/254, Loss: 0.0054\n",
            "Epoch 7/25, Batch 231/254, Loss: 0.0060\n",
            "Epoch 7/25, Batch 241/254, Loss: 0.0191\n",
            "Epoch 7/25, Batch 251/254, Loss: 0.0048\n",
            "Epoch 7/25:\n",
            "Train Loss: 0.0199, Train Acc: 99.29%\n",
            "Val Loss: 0.0179, Val Acc: 99.44%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 8/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 8/25, Batch 1/254, Loss: 0.0142\n",
            "Epoch 8/25, Batch 11/254, Loss: 0.0146\n",
            "Epoch 8/25, Batch 21/254, Loss: 0.0227\n",
            "Epoch 8/25, Batch 31/254, Loss: 0.0120\n",
            "Epoch 8/25, Batch 41/254, Loss: 0.0176\n",
            "Epoch 8/25, Batch 51/254, Loss: 0.0131\n",
            "Epoch 8/25, Batch 61/254, Loss: 0.0054\n",
            "Epoch 8/25, Batch 71/254, Loss: 0.0133\n",
            "Epoch 8/25, Batch 81/254, Loss: 0.0068\n",
            "Epoch 8/25, Batch 91/254, Loss: 0.0307\n",
            "Epoch 8/25, Batch 101/254, Loss: 0.0212\n",
            "Epoch 8/25, Batch 111/254, Loss: 0.0192\n",
            "Epoch 8/25, Batch 121/254, Loss: 0.0232\n",
            "Epoch 8/25, Batch 131/254, Loss: 0.0056\n",
            "Epoch 8/25, Batch 141/254, Loss: 0.0014\n",
            "Epoch 8/25, Batch 151/254, Loss: 0.0150\n",
            "Epoch 8/25, Batch 161/254, Loss: 0.0282\n",
            "Epoch 8/25, Batch 171/254, Loss: 0.0120\n",
            "Epoch 8/25, Batch 181/254, Loss: 0.0057\n",
            "Epoch 8/25, Batch 191/254, Loss: 0.0205\n",
            "Epoch 8/25, Batch 201/254, Loss: 0.0231\n",
            "Epoch 8/25, Batch 211/254, Loss: 0.0112\n",
            "Epoch 8/25, Batch 221/254, Loss: 0.0116\n",
            "Epoch 8/25, Batch 231/254, Loss: 0.0122\n",
            "Epoch 8/25, Batch 241/254, Loss: 0.0183\n",
            "Epoch 8/25, Batch 251/254, Loss: 0.0119\n",
            "Epoch 8/25:\n",
            "Train Loss: 0.0186, Train Acc: 99.34%\n",
            "Val Loss: 0.0198, Val Acc: 99.36%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 9/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 9/25, Batch 1/254, Loss: 0.0037\n",
            "Epoch 9/25, Batch 11/254, Loss: 0.0069\n",
            "Epoch 9/25, Batch 21/254, Loss: 0.0167\n",
            "Epoch 9/25, Batch 31/254, Loss: 0.0013\n",
            "Epoch 9/25, Batch 41/254, Loss: 0.0234\n",
            "Epoch 9/25, Batch 51/254, Loss: 0.0128\n",
            "Epoch 9/25, Batch 61/254, Loss: 0.0205\n",
            "Epoch 9/25, Batch 71/254, Loss: 0.0084\n",
            "Epoch 9/25, Batch 81/254, Loss: 0.0048\n",
            "Epoch 9/25, Batch 91/254, Loss: 0.0014\n",
            "Epoch 9/25, Batch 101/254, Loss: 0.0297\n",
            "Epoch 9/25, Batch 111/254, Loss: 0.0316\n",
            "Epoch 9/25, Batch 121/254, Loss: 0.0020\n",
            "Epoch 9/25, Batch 131/254, Loss: 0.0034\n",
            "Epoch 9/25, Batch 141/254, Loss: 0.0212\n",
            "Epoch 9/25, Batch 151/254, Loss: 0.0130\n",
            "Epoch 9/25, Batch 161/254, Loss: 0.0038\n",
            "Epoch 9/25, Batch 171/254, Loss: 0.0387\n",
            "Epoch 9/25, Batch 181/254, Loss: 0.0053\n",
            "Epoch 9/25, Batch 191/254, Loss: 0.0265\n",
            "Epoch 9/25, Batch 201/254, Loss: 0.0136\n",
            "Epoch 9/25, Batch 211/254, Loss: 0.0230\n",
            "Epoch 9/25, Batch 221/254, Loss: 0.0077\n",
            "Epoch 9/25, Batch 231/254, Loss: 0.0116\n",
            "Epoch 9/25, Batch 241/254, Loss: 0.0078\n",
            "Epoch 9/25, Batch 251/254, Loss: 0.0046\n",
            "Epoch 9/25:\n",
            "Train Loss: 0.0143, Train Acc: 99.51%\n",
            "Val Loss: 0.0134, Val Acc: 99.59%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 10/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 10/25, Batch 1/254, Loss: 0.0039\n",
            "Epoch 10/25, Batch 11/254, Loss: 0.0110\n",
            "Epoch 10/25, Batch 21/254, Loss: 0.0163\n",
            "Epoch 10/25, Batch 31/254, Loss: 0.0046\n",
            "Epoch 10/25, Batch 41/254, Loss: 0.0027\n",
            "Epoch 10/25, Batch 51/254, Loss: 0.0068\n",
            "Epoch 10/25, Batch 61/254, Loss: 0.0053\n",
            "Epoch 10/25, Batch 71/254, Loss: 0.0052\n",
            "Epoch 10/25, Batch 81/254, Loss: 0.0058\n",
            "Epoch 10/25, Batch 91/254, Loss: 0.0242\n",
            "Epoch 10/25, Batch 101/254, Loss: 0.0210\n",
            "Epoch 10/25, Batch 111/254, Loss: 0.0172\n",
            "Epoch 10/25, Batch 121/254, Loss: 0.0136\n",
            "Epoch 10/25, Batch 131/254, Loss: 0.0099\n",
            "Epoch 10/25, Batch 141/254, Loss: 0.0154\n",
            "Epoch 10/25, Batch 151/254, Loss: 0.0081\n",
            "Epoch 10/25, Batch 161/254, Loss: 0.0039\n",
            "Epoch 10/25, Batch 171/254, Loss: 0.0041\n",
            "Epoch 10/25, Batch 181/254, Loss: 0.0094\n",
            "Epoch 10/25, Batch 191/254, Loss: 0.0030\n",
            "Epoch 10/25, Batch 201/254, Loss: 0.0067\n",
            "Epoch 10/25, Batch 211/254, Loss: 0.0132\n",
            "Epoch 10/25, Batch 221/254, Loss: 0.0485\n",
            "Epoch 10/25, Batch 231/254, Loss: 0.0400\n",
            "Epoch 10/25, Batch 241/254, Loss: 0.0069\n",
            "Epoch 10/25, Batch 251/254, Loss: 0.0005\n",
            "Epoch 10/25:\n",
            "Train Loss: 0.0133, Train Acc: 99.51%\n",
            "Val Loss: 0.0149, Val Acc: 99.49%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 11/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 11/25, Batch 1/254, Loss: 0.0109\n",
            "Epoch 11/25, Batch 11/254, Loss: 0.0542\n",
            "Epoch 11/25, Batch 21/254, Loss: 0.0031\n",
            "Epoch 11/25, Batch 31/254, Loss: 0.0314\n",
            "Epoch 11/25, Batch 41/254, Loss: 0.0037\n",
            "Epoch 11/25, Batch 51/254, Loss: 0.0249\n",
            "Epoch 11/25, Batch 61/254, Loss: 0.0317\n",
            "Epoch 11/25, Batch 71/254, Loss: 0.0079\n",
            "Epoch 11/25, Batch 81/254, Loss: 0.0043\n",
            "Epoch 11/25, Batch 91/254, Loss: 0.0084\n",
            "Epoch 11/25, Batch 101/254, Loss: 0.0156\n",
            "Epoch 11/25, Batch 111/254, Loss: 0.0026\n",
            "Epoch 11/25, Batch 121/254, Loss: 0.0021\n",
            "Epoch 11/25, Batch 131/254, Loss: 0.0021\n",
            "Epoch 11/25, Batch 141/254, Loss: 0.0088\n",
            "Epoch 11/25, Batch 151/254, Loss: 0.0219\n",
            "Epoch 11/25, Batch 161/254, Loss: 0.0233\n",
            "Epoch 11/25, Batch 171/254, Loss: 0.0040\n",
            "Epoch 11/25, Batch 181/254, Loss: 0.0197\n",
            "Epoch 11/25, Batch 191/254, Loss: 0.0109\n",
            "Epoch 11/25, Batch 201/254, Loss: 0.0549\n",
            "Epoch 11/25, Batch 211/254, Loss: 0.0224\n",
            "Epoch 11/25, Batch 221/254, Loss: 0.0050\n",
            "Epoch 11/25, Batch 231/254, Loss: 0.0230\n",
            "Epoch 11/25, Batch 241/254, Loss: 0.0026\n",
            "Epoch 11/25, Batch 251/254, Loss: 0.0056\n",
            "Epoch 11/25:\n",
            "Train Loss: 0.0136, Train Acc: 99.53%\n",
            "Val Loss: 0.0139, Val Acc: 99.50%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 12/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 12/25, Batch 1/254, Loss: 0.0018\n",
            "Epoch 12/25, Batch 11/254, Loss: 0.0091\n",
            "Epoch 12/25, Batch 21/254, Loss: 0.0202\n",
            "Epoch 12/25, Batch 31/254, Loss: 0.0041\n",
            "Epoch 12/25, Batch 41/254, Loss: 0.0110\n",
            "Epoch 12/25, Batch 51/254, Loss: 0.0089\n",
            "Epoch 12/25, Batch 61/254, Loss: 0.0391\n",
            "Epoch 12/25, Batch 71/254, Loss: 0.0161\n",
            "Epoch 12/25, Batch 81/254, Loss: 0.0294\n",
            "Epoch 12/25, Batch 91/254, Loss: 0.0226\n",
            "Epoch 12/25, Batch 101/254, Loss: 0.0258\n",
            "Epoch 12/25, Batch 111/254, Loss: 0.0094\n",
            "Epoch 12/25, Batch 121/254, Loss: 0.0104\n",
            "Epoch 12/25, Batch 131/254, Loss: 0.0084\n",
            "Epoch 12/25, Batch 141/254, Loss: 0.0106\n",
            "Epoch 12/25, Batch 151/254, Loss: 0.0294\n",
            "Epoch 12/25, Batch 161/254, Loss: 0.0262\n",
            "Epoch 12/25, Batch 171/254, Loss: 0.0221\n",
            "Epoch 12/25, Batch 181/254, Loss: 0.0102\n",
            "Epoch 12/25, Batch 191/254, Loss: 0.0175\n",
            "Epoch 12/25, Batch 201/254, Loss: 0.0019\n",
            "Epoch 12/25, Batch 211/254, Loss: 0.0022\n",
            "Epoch 12/25, Batch 221/254, Loss: 0.0180\n",
            "Epoch 12/25, Batch 231/254, Loss: 0.0182\n",
            "Epoch 12/25, Batch 241/254, Loss: 0.0047\n",
            "Epoch 12/25, Batch 251/254, Loss: 0.0093\n",
            "Epoch 12/25:\n",
            "Train Loss: 0.0131, Train Acc: 99.52%\n",
            "Val Loss: 0.0299, Val Acc: 99.03%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 13/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 13/25, Batch 1/254, Loss: 0.0207\n",
            "Epoch 13/25, Batch 11/254, Loss: 0.0142\n",
            "Epoch 13/25, Batch 21/254, Loss: 0.0077\n",
            "Epoch 13/25, Batch 31/254, Loss: 0.0347\n",
            "Epoch 13/25, Batch 41/254, Loss: 0.0489\n",
            "Epoch 13/25, Batch 51/254, Loss: 0.0102\n",
            "Epoch 13/25, Batch 61/254, Loss: 0.0240\n",
            "Epoch 13/25, Batch 71/254, Loss: 0.0111\n",
            "Epoch 13/25, Batch 81/254, Loss: 0.0135\n",
            "Epoch 13/25, Batch 91/254, Loss: 0.0092\n",
            "Epoch 13/25, Batch 101/254, Loss: 0.0029\n",
            "Epoch 13/25, Batch 111/254, Loss: 0.0060\n",
            "Epoch 13/25, Batch 121/254, Loss: 0.0280\n",
            "Epoch 13/25, Batch 131/254, Loss: 0.0112\n",
            "Epoch 13/25, Batch 141/254, Loss: 0.0005\n",
            "Epoch 13/25, Batch 151/254, Loss: 0.0063\n",
            "Epoch 13/25, Batch 161/254, Loss: 0.0007\n",
            "Epoch 13/25, Batch 171/254, Loss: 0.0037\n",
            "Epoch 13/25, Batch 181/254, Loss: 0.0147\n",
            "Epoch 13/25, Batch 191/254, Loss: 0.0203\n",
            "Epoch 13/25, Batch 201/254, Loss: 0.0085\n",
            "Epoch 13/25, Batch 211/254, Loss: 0.0039\n",
            "Epoch 13/25, Batch 221/254, Loss: 0.0148\n",
            "Epoch 13/25, Batch 231/254, Loss: 0.0199\n",
            "Epoch 13/25, Batch 241/254, Loss: 0.0161\n",
            "Epoch 13/25, Batch 251/254, Loss: 0.0127\n",
            "Epoch 13/25:\n",
            "Train Loss: 0.0114, Train Acc: 99.60%\n",
            "Val Loss: 0.0241, Val Acc: 99.18%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 14/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 14/25, Batch 1/254, Loss: 0.0209\n",
            "Epoch 14/25, Batch 11/254, Loss: 0.0018\n",
            "Epoch 14/25, Batch 21/254, Loss: 0.0014\n",
            "Epoch 14/25, Batch 31/254, Loss: 0.0155\n",
            "Epoch 14/25, Batch 41/254, Loss: 0.0160\n",
            "Epoch 14/25, Batch 51/254, Loss: 0.0285\n",
            "Epoch 14/25, Batch 61/254, Loss: 0.0118\n",
            "Epoch 14/25, Batch 71/254, Loss: 0.0143\n",
            "Epoch 14/25, Batch 81/254, Loss: 0.0002\n",
            "Epoch 14/25, Batch 91/254, Loss: 0.0071\n",
            "Epoch 14/25, Batch 101/254, Loss: 0.0120\n",
            "Epoch 14/25, Batch 111/254, Loss: 0.0006\n",
            "Epoch 14/25, Batch 121/254, Loss: 0.0286\n",
            "Epoch 14/25, Batch 131/254, Loss: 0.0064\n",
            "Epoch 14/25, Batch 141/254, Loss: 0.0164\n",
            "Epoch 14/25, Batch 151/254, Loss: 0.0010\n",
            "Epoch 14/25, Batch 161/254, Loss: 0.0109\n",
            "Epoch 14/25, Batch 171/254, Loss: 0.0152\n",
            "Epoch 14/25, Batch 181/254, Loss: 0.0047\n",
            "Epoch 14/25, Batch 191/254, Loss: 0.0531\n",
            "Epoch 14/25, Batch 201/254, Loss: 0.0026\n",
            "Epoch 14/25, Batch 211/254, Loss: 0.0029\n",
            "Epoch 14/25, Batch 221/254, Loss: 0.0144\n",
            "Epoch 14/25, Batch 231/254, Loss: 0.0025\n",
            "Epoch 14/25, Batch 241/254, Loss: 0.0047\n",
            "Epoch 14/25, Batch 251/254, Loss: 0.0272\n",
            "Epoch 14/25:\n",
            "Train Loss: 0.0109, Train Acc: 99.62%\n",
            "Val Loss: 0.0104, Val Acc: 99.65%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 15/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 15/25, Batch 1/254, Loss: 0.0207\n",
            "Epoch 15/25, Batch 11/254, Loss: 0.0158\n",
            "Epoch 15/25, Batch 21/254, Loss: 0.0027\n",
            "Epoch 15/25, Batch 31/254, Loss: 0.0087\n",
            "Epoch 15/25, Batch 41/254, Loss: 0.0016\n",
            "Epoch 15/25, Batch 51/254, Loss: 0.0180\n",
            "Epoch 15/25, Batch 61/254, Loss: 0.0171\n",
            "Epoch 15/25, Batch 71/254, Loss: 0.0173\n",
            "Epoch 15/25, Batch 81/254, Loss: 0.0122\n",
            "Epoch 15/25, Batch 91/254, Loss: 0.0232\n",
            "Epoch 15/25, Batch 101/254, Loss: 0.0368\n",
            "Epoch 15/25, Batch 111/254, Loss: 0.0058\n",
            "Epoch 15/25, Batch 121/254, Loss: 0.0187\n",
            "Epoch 15/25, Batch 131/254, Loss: 0.0178\n",
            "Epoch 15/25, Batch 141/254, Loss: 0.0205\n",
            "Epoch 15/25, Batch 151/254, Loss: 0.0026\n",
            "Epoch 15/25, Batch 161/254, Loss: 0.0064\n",
            "Epoch 15/25, Batch 171/254, Loss: 0.0022\n",
            "Epoch 15/25, Batch 181/254, Loss: 0.0023\n",
            "Epoch 15/25, Batch 191/254, Loss: 0.0101\n",
            "Epoch 15/25, Batch 201/254, Loss: 0.0028\n",
            "Epoch 15/25, Batch 211/254, Loss: 0.0181\n",
            "Epoch 15/25, Batch 221/254, Loss: 0.0108\n",
            "Epoch 15/25, Batch 231/254, Loss: 0.0130\n",
            "Epoch 15/25, Batch 241/254, Loss: 0.0031\n",
            "Epoch 15/25, Batch 251/254, Loss: 0.0037\n",
            "Epoch 15/25:\n",
            "Train Loss: 0.0136, Train Acc: 99.51%\n",
            "Val Loss: 0.0244, Val Acc: 99.11%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 16/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 16/25, Batch 1/254, Loss: 0.0195\n",
            "Epoch 16/25, Batch 11/254, Loss: 0.0486\n",
            "Epoch 16/25, Batch 21/254, Loss: 0.0364\n",
            "Epoch 16/25, Batch 31/254, Loss: 0.0031\n",
            "Epoch 16/25, Batch 41/254, Loss: 0.0534\n",
            "Epoch 16/25, Batch 51/254, Loss: 0.0054\n",
            "Epoch 16/25, Batch 61/254, Loss: 0.0210\n",
            "Epoch 16/25, Batch 71/254, Loss: 0.0112\n",
            "Epoch 16/25, Batch 81/254, Loss: 0.0042\n",
            "Epoch 16/25, Batch 91/254, Loss: 0.0140\n",
            "Epoch 16/25, Batch 101/254, Loss: 0.0181\n",
            "Epoch 16/25, Batch 111/254, Loss: 0.0059\n",
            "Epoch 16/25, Batch 121/254, Loss: 0.0283\n",
            "Epoch 16/25, Batch 131/254, Loss: 0.0030\n",
            "Epoch 16/25, Batch 141/254, Loss: 0.0013\n",
            "Epoch 16/25, Batch 151/254, Loss: 0.0024\n",
            "Epoch 16/25, Batch 161/254, Loss: 0.0041\n",
            "Epoch 16/25, Batch 171/254, Loss: 0.0014\n",
            "Epoch 16/25, Batch 181/254, Loss: 0.0016\n",
            "Epoch 16/25, Batch 191/254, Loss: 0.0182\n",
            "Epoch 16/25, Batch 201/254, Loss: 0.0031\n",
            "Epoch 16/25, Batch 211/254, Loss: 0.0102\n",
            "Epoch 16/25, Batch 221/254, Loss: 0.0010\n",
            "Epoch 16/25, Batch 231/254, Loss: 0.0006\n",
            "Epoch 16/25, Batch 241/254, Loss: 0.0025\n",
            "Epoch 16/25, Batch 251/254, Loss: 0.0102\n",
            "Epoch 16/25:\n",
            "Train Loss: 0.0104, Train Acc: 99.64%\n",
            "Val Loss: 0.0065, Val Acc: 99.78%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 17/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 17/25, Batch 1/254, Loss: 0.0023\n",
            "Epoch 17/25, Batch 11/254, Loss: 0.0024\n",
            "Epoch 17/25, Batch 21/254, Loss: 0.0128\n",
            "Epoch 17/25, Batch 31/254, Loss: 0.0062\n",
            "Epoch 17/25, Batch 41/254, Loss: 0.0454\n",
            "Epoch 17/25, Batch 51/254, Loss: 0.0166\n",
            "Epoch 17/25, Batch 61/254, Loss: 0.0214\n",
            "Epoch 17/25, Batch 71/254, Loss: 0.0059\n",
            "Epoch 17/25, Batch 81/254, Loss: 0.0010\n",
            "Epoch 17/25, Batch 91/254, Loss: 0.0155\n",
            "Epoch 17/25, Batch 101/254, Loss: 0.0110\n",
            "Epoch 17/25, Batch 111/254, Loss: 0.0012\n",
            "Epoch 17/25, Batch 121/254, Loss: 0.0012\n",
            "Epoch 17/25, Batch 131/254, Loss: 0.0039\n",
            "Epoch 17/25, Batch 141/254, Loss: 0.0028\n",
            "Epoch 17/25, Batch 151/254, Loss: 0.0165\n",
            "Epoch 17/25, Batch 161/254, Loss: 0.0205\n",
            "Epoch 17/25, Batch 171/254, Loss: 0.0047\n",
            "Epoch 17/25, Batch 181/254, Loss: 0.0077\n",
            "Epoch 17/25, Batch 191/254, Loss: 0.0014\n",
            "Epoch 17/25, Batch 201/254, Loss: 0.0053\n",
            "Epoch 17/25, Batch 211/254, Loss: 0.0013\n",
            "Epoch 17/25, Batch 221/254, Loss: 0.0069\n",
            "Epoch 17/25, Batch 231/254, Loss: 0.0104\n",
            "Epoch 17/25, Batch 241/254, Loss: 0.0096\n",
            "Epoch 17/25, Batch 251/254, Loss: 0.0039\n",
            "Epoch 17/25:\n",
            "Train Loss: 0.0105, Train Acc: 99.63%\n",
            "Val Loss: 0.0077, Val Acc: 99.73%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 18/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 18/25, Batch 1/254, Loss: 0.0037\n",
            "Epoch 18/25, Batch 11/254, Loss: 0.0131\n",
            "Epoch 18/25, Batch 21/254, Loss: 0.0082\n",
            "Epoch 18/25, Batch 31/254, Loss: 0.0009\n",
            "Epoch 18/25, Batch 41/254, Loss: 0.0036\n",
            "Epoch 18/25, Batch 51/254, Loss: 0.0318\n",
            "Epoch 18/25, Batch 61/254, Loss: 0.0119\n",
            "Epoch 18/25, Batch 71/254, Loss: 0.0105\n",
            "Epoch 18/25, Batch 81/254, Loss: 0.0018\n",
            "Epoch 18/25, Batch 91/254, Loss: 0.0027\n",
            "Epoch 18/25, Batch 101/254, Loss: 0.0161\n",
            "Epoch 18/25, Batch 111/254, Loss: 0.0105\n",
            "Epoch 18/25, Batch 121/254, Loss: 0.0159\n",
            "Epoch 18/25, Batch 131/254, Loss: 0.0138\n",
            "Epoch 18/25, Batch 141/254, Loss: 0.0147\n",
            "Epoch 18/25, Batch 151/254, Loss: 0.0067\n",
            "Epoch 18/25, Batch 161/254, Loss: 0.0016\n",
            "Epoch 18/25, Batch 171/254, Loss: 0.0083\n",
            "Epoch 18/25, Batch 181/254, Loss: 0.0009\n",
            "Epoch 18/25, Batch 191/254, Loss: 0.0172\n",
            "Epoch 18/25, Batch 201/254, Loss: 0.0018\n",
            "Epoch 18/25, Batch 211/254, Loss: 0.0134\n",
            "Epoch 18/25, Batch 221/254, Loss: 0.0068\n",
            "Epoch 18/25, Batch 231/254, Loss: 0.0431\n",
            "Epoch 18/25, Batch 241/254, Loss: 0.0013\n",
            "Epoch 18/25, Batch 251/254, Loss: 0.0033\n",
            "Epoch 18/25:\n",
            "Train Loss: 0.0105, Train Acc: 99.66%\n",
            "Val Loss: 0.0067, Val Acc: 99.76%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 19/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 19/25, Batch 1/254, Loss: 0.0032\n",
            "Epoch 19/25, Batch 11/254, Loss: 0.0120\n",
            "Epoch 19/25, Batch 21/254, Loss: 0.0033\n",
            "Epoch 19/25, Batch 31/254, Loss: 0.0037\n",
            "Epoch 19/25, Batch 41/254, Loss: 0.0112\n",
            "Epoch 19/25, Batch 51/254, Loss: 0.0140\n",
            "Epoch 19/25, Batch 61/254, Loss: 0.0006\n",
            "Epoch 19/25, Batch 71/254, Loss: 0.0196\n",
            "Epoch 19/25, Batch 81/254, Loss: 0.0012\n",
            "Epoch 19/25, Batch 91/254, Loss: 0.0030\n",
            "Epoch 19/25, Batch 101/254, Loss: 0.0186\n",
            "Epoch 19/25, Batch 111/254, Loss: 0.0007\n",
            "Epoch 19/25, Batch 121/254, Loss: 0.0045\n",
            "Epoch 19/25, Batch 131/254, Loss: 0.0040\n",
            "Epoch 19/25, Batch 141/254, Loss: 0.0029\n",
            "Epoch 19/25, Batch 151/254, Loss: 0.0085\n",
            "Epoch 19/25, Batch 161/254, Loss: 0.0083\n",
            "Epoch 19/25, Batch 171/254, Loss: 0.0034\n",
            "Epoch 19/25, Batch 181/254, Loss: 0.0089\n",
            "Epoch 19/25, Batch 191/254, Loss: 0.0094\n",
            "Epoch 19/25, Batch 201/254, Loss: 0.0306\n",
            "Epoch 19/25, Batch 211/254, Loss: 0.0043\n",
            "Epoch 19/25, Batch 221/254, Loss: 0.0129\n",
            "Epoch 19/25, Batch 231/254, Loss: 0.0099\n",
            "Epoch 19/25, Batch 241/254, Loss: 0.0013\n",
            "Epoch 19/25, Batch 251/254, Loss: 0.0017\n",
            "Epoch 19/25:\n",
            "Train Loss: 0.0070, Train Acc: 99.76%\n",
            "Val Loss: 0.0076, Val Acc: 99.73%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 20/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 20/25, Batch 1/254, Loss: 0.0101\n",
            "Epoch 20/25, Batch 11/254, Loss: 0.0159\n",
            "Epoch 20/25, Batch 21/254, Loss: 0.0020\n",
            "Epoch 20/25, Batch 31/254, Loss: 0.0437\n",
            "Epoch 20/25, Batch 41/254, Loss: 0.0290\n",
            "Epoch 20/25, Batch 51/254, Loss: 0.0174\n",
            "Epoch 20/25, Batch 61/254, Loss: 0.0184\n",
            "Epoch 20/25, Batch 71/254, Loss: 0.0053\n",
            "Epoch 20/25, Batch 81/254, Loss: 0.0012\n",
            "Epoch 20/25, Batch 91/254, Loss: 0.0092\n",
            "Epoch 20/25, Batch 101/254, Loss: 0.0040\n",
            "Epoch 20/25, Batch 111/254, Loss: 0.0188\n",
            "Epoch 20/25, Batch 121/254, Loss: 0.0095\n",
            "Epoch 20/25, Batch 131/254, Loss: 0.0144\n",
            "Epoch 20/25, Batch 141/254, Loss: 0.0145\n",
            "Epoch 20/25, Batch 151/254, Loss: 0.0027\n",
            "Epoch 20/25, Batch 161/254, Loss: 0.0060\n",
            "Epoch 20/25, Batch 171/254, Loss: 0.0135\n",
            "Epoch 20/25, Batch 181/254, Loss: 0.0037\n",
            "Epoch 20/25, Batch 191/254, Loss: 0.0011\n",
            "Epoch 20/25, Batch 201/254, Loss: 0.0091\n",
            "Epoch 20/25, Batch 211/254, Loss: 0.0046\n",
            "Epoch 20/25, Batch 221/254, Loss: 0.0007\n",
            "Epoch 20/25, Batch 231/254, Loss: 0.0091\n",
            "Epoch 20/25, Batch 241/254, Loss: 0.0256\n",
            "Epoch 20/25, Batch 251/254, Loss: 0.0011\n",
            "Epoch 20/25:\n",
            "Train Loss: 0.0096, Train Acc: 99.66%\n",
            "Val Loss: 0.0077, Val Acc: 99.73%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 21/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 21/25, Batch 1/254, Loss: 0.0032\n",
            "Epoch 21/25, Batch 11/254, Loss: 0.0020\n",
            "Epoch 21/25, Batch 21/254, Loss: 0.0009\n",
            "Epoch 21/25, Batch 31/254, Loss: 0.0057\n",
            "Epoch 21/25, Batch 41/254, Loss: 0.0067\n",
            "Epoch 21/25, Batch 51/254, Loss: 0.0044\n",
            "Epoch 21/25, Batch 61/254, Loss: 0.0166\n",
            "Epoch 21/25, Batch 71/254, Loss: 0.0100\n",
            "Epoch 21/25, Batch 81/254, Loss: 0.0196\n",
            "Epoch 21/25, Batch 91/254, Loss: 0.0572\n",
            "Epoch 21/25, Batch 101/254, Loss: 0.0135\n",
            "Epoch 21/25, Batch 111/254, Loss: 0.0105\n",
            "Epoch 21/25, Batch 121/254, Loss: 0.0114\n",
            "Epoch 21/25, Batch 131/254, Loss: 0.0084\n",
            "Epoch 21/25, Batch 141/254, Loss: 0.0058\n",
            "Epoch 21/25, Batch 151/254, Loss: 0.0133\n",
            "Epoch 21/25, Batch 161/254, Loss: 0.0026\n",
            "Epoch 21/25, Batch 171/254, Loss: 0.0079\n",
            "Epoch 21/25, Batch 181/254, Loss: 0.0085\n",
            "Epoch 21/25, Batch 191/254, Loss: 0.0027\n",
            "Epoch 21/25, Batch 201/254, Loss: 0.0018\n",
            "Epoch 21/25, Batch 211/254, Loss: 0.0021\n",
            "Epoch 21/25, Batch 221/254, Loss: 0.0009\n",
            "Epoch 21/25, Batch 231/254, Loss: 0.0014\n",
            "Epoch 21/25, Batch 241/254, Loss: 0.0223\n",
            "Epoch 21/25, Batch 251/254, Loss: 0.0279\n",
            "Epoch 21/25:\n",
            "Train Loss: 0.0089, Train Acc: 99.67%\n",
            "Val Loss: 0.0093, Val Acc: 99.69%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 22/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 22/25, Batch 1/254, Loss: 0.0240\n",
            "Epoch 22/25, Batch 11/254, Loss: 0.0096\n",
            "Epoch 22/25, Batch 21/254, Loss: 0.0026\n",
            "Epoch 22/25, Batch 31/254, Loss: 0.0048\n",
            "Epoch 22/25, Batch 41/254, Loss: 0.0179\n",
            "Epoch 22/25, Batch 51/254, Loss: 0.0034\n",
            "Epoch 22/25, Batch 61/254, Loss: 0.0020\n",
            "Epoch 22/25, Batch 71/254, Loss: 0.0027\n",
            "Epoch 22/25, Batch 81/254, Loss: 0.0176\n",
            "Epoch 22/25, Batch 91/254, Loss: 0.0265\n",
            "Epoch 22/25, Batch 101/254, Loss: 0.0025\n",
            "Epoch 22/25, Batch 111/254, Loss: 0.0022\n",
            "Epoch 22/25, Batch 121/254, Loss: 0.0105\n",
            "Epoch 22/25, Batch 131/254, Loss: 0.0142\n",
            "Epoch 22/25, Batch 141/254, Loss: 0.0018\n",
            "Epoch 22/25, Batch 151/254, Loss: 0.0430\n",
            "Epoch 22/25, Batch 161/254, Loss: 0.0020\n",
            "Epoch 22/25, Batch 171/254, Loss: 0.0005\n",
            "Epoch 22/25, Batch 181/254, Loss: 0.0073\n",
            "Epoch 22/25, Batch 191/254, Loss: 0.0114\n",
            "Epoch 22/25, Batch 201/254, Loss: 0.0016\n",
            "Epoch 22/25, Batch 211/254, Loss: 0.0011\n",
            "Epoch 22/25, Batch 221/254, Loss: 0.0150\n",
            "Epoch 22/25, Batch 231/254, Loss: 0.0012\n",
            "Epoch 22/25, Batch 241/254, Loss: 0.0158\n",
            "Epoch 22/25, Batch 251/254, Loss: 0.0051\n",
            "Epoch 22/25:\n",
            "Train Loss: 0.0093, Train Acc: 99.67%\n",
            "Val Loss: 0.0101, Val Acc: 99.67%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 23/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 23/25, Batch 1/254, Loss: 0.0041\n",
            "Epoch 23/25, Batch 11/254, Loss: 0.0046\n",
            "Epoch 23/25, Batch 21/254, Loss: 0.0067\n",
            "Epoch 23/25, Batch 31/254, Loss: 0.0009\n",
            "Epoch 23/25, Batch 41/254, Loss: 0.0016\n",
            "Epoch 23/25, Batch 51/254, Loss: 0.0006\n",
            "Epoch 23/25, Batch 61/254, Loss: 0.0017\n",
            "Epoch 23/25, Batch 71/254, Loss: 0.0007\n",
            "Epoch 23/25, Batch 81/254, Loss: 0.0034\n",
            "Epoch 23/25, Batch 91/254, Loss: 0.0103\n",
            "Epoch 23/25, Batch 101/254, Loss: 0.0008\n",
            "Epoch 23/25, Batch 111/254, Loss: 0.0009\n",
            "Epoch 23/25, Batch 121/254, Loss: 0.0021\n",
            "Epoch 23/25, Batch 131/254, Loss: 0.0001\n",
            "Epoch 23/25, Batch 141/254, Loss: 0.0001\n",
            "Epoch 23/25, Batch 151/254, Loss: 0.0007\n",
            "Epoch 23/25, Batch 161/254, Loss: 0.0004\n",
            "Epoch 23/25, Batch 171/254, Loss: 0.0027\n",
            "Epoch 23/25, Batch 181/254, Loss: 0.0004\n",
            "Epoch 23/25, Batch 191/254, Loss: 0.0002\n",
            "Epoch 23/25, Batch 201/254, Loss: 0.0007\n",
            "Epoch 23/25, Batch 211/254, Loss: 0.0005\n",
            "Epoch 23/25, Batch 221/254, Loss: 0.0004\n",
            "Epoch 23/25, Batch 231/254, Loss: 0.0010\n",
            "Epoch 23/25, Batch 241/254, Loss: 0.0002\n",
            "Epoch 23/25, Batch 251/254, Loss: 0.0004\n",
            "Epoch 23/25:\n",
            "Train Loss: 0.0035, Train Acc: 99.89%\n",
            "Val Loss: 0.0079, Val Acc: 99.75%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 24/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 24/25, Batch 1/254, Loss: 0.0001\n",
            "Epoch 24/25, Batch 11/254, Loss: 0.0011\n",
            "Epoch 24/25, Batch 21/254, Loss: 0.0001\n",
            "Epoch 24/25, Batch 31/254, Loss: 0.0001\n",
            "Epoch 24/25, Batch 41/254, Loss: 0.0001\n",
            "Epoch 24/25, Batch 51/254, Loss: 0.0002\n",
            "Epoch 24/25, Batch 61/254, Loss: 0.0029\n",
            "Epoch 24/25, Batch 71/254, Loss: 0.0001\n",
            "Epoch 24/25, Batch 81/254, Loss: 0.0053\n",
            "Epoch 24/25, Batch 91/254, Loss: 0.0010\n",
            "Epoch 24/25, Batch 101/254, Loss: 0.0001\n",
            "Epoch 24/25, Batch 111/254, Loss: 0.0048\n",
            "Epoch 24/25, Batch 121/254, Loss: 0.0050\n",
            "Epoch 24/25, Batch 131/254, Loss: 0.0001\n",
            "Epoch 24/25, Batch 141/254, Loss: 0.0049\n",
            "Epoch 24/25, Batch 151/254, Loss: 0.0001\n",
            "Epoch 24/25, Batch 161/254, Loss: 0.0010\n",
            "Epoch 24/25, Batch 171/254, Loss: 0.0005\n",
            "Epoch 24/25, Batch 181/254, Loss: 0.0118\n",
            "Epoch 24/25, Batch 191/254, Loss: 0.0027\n",
            "Epoch 24/25, Batch 201/254, Loss: 0.0002\n",
            "Epoch 24/25, Batch 211/254, Loss: 0.0010\n",
            "Epoch 24/25, Batch 221/254, Loss: 0.0014\n",
            "Epoch 24/25, Batch 231/254, Loss: 0.0002\n",
            "Epoch 24/25, Batch 241/254, Loss: 0.0029\n",
            "Epoch 24/25, Batch 251/254, Loss: 0.0001\n",
            "Epoch 24/25:\n",
            "Train Loss: 0.0030, Train Acc: 99.89%\n",
            "Val Loss: 0.0049, Val Acc: 99.83%\n",
            "------------------------------------------------------------\n",
            "Starting epoch 25/25...\n",
            "Starting training loop with 254 batches...\n",
            "Successfully loaded first batch: images shape torch.Size([256, 3, 224, 224]), labels shape torch.Size([256])\n",
            "Epoch 25/25, Batch 1/254, Loss: 0.0005\n",
            "Epoch 25/25, Batch 11/254, Loss: 0.0002\n",
            "Epoch 25/25, Batch 21/254, Loss: 0.0001\n",
            "Epoch 25/25, Batch 31/254, Loss: 0.0004\n",
            "Epoch 25/25, Batch 41/254, Loss: 0.0016\n",
            "Epoch 25/25, Batch 51/254, Loss: 0.0003\n",
            "Epoch 25/25, Batch 61/254, Loss: 0.0005\n",
            "Epoch 25/25, Batch 71/254, Loss: 0.0003\n",
            "Epoch 25/25, Batch 81/254, Loss: 0.0001\n",
            "Epoch 25/25, Batch 91/254, Loss: 0.0006\n",
            "Epoch 25/25, Batch 101/254, Loss: 0.0017\n",
            "Epoch 25/25, Batch 111/254, Loss: 0.0002\n",
            "Epoch 25/25, Batch 121/254, Loss: 0.0102\n",
            "Epoch 25/25, Batch 131/254, Loss: 0.0019\n",
            "Epoch 25/25, Batch 141/254, Loss: 0.0002\n",
            "Epoch 25/25, Batch 151/254, Loss: 0.0003\n",
            "Epoch 25/25, Batch 161/254, Loss: 0.0254\n",
            "Epoch 25/25, Batch 171/254, Loss: 0.0005\n",
            "Epoch 25/25, Batch 181/254, Loss: 0.0016\n",
            "Epoch 25/25, Batch 191/254, Loss: 0.0040\n",
            "Epoch 25/25, Batch 201/254, Loss: 0.0038\n",
            "Epoch 25/25, Batch 211/254, Loss: 0.0001\n",
            "Epoch 25/25, Batch 221/254, Loss: 0.0014\n",
            "Epoch 25/25, Batch 231/254, Loss: 0.0150\n",
            "Epoch 25/25, Batch 241/254, Loss: 0.0018\n",
            "Epoch 25/25, Batch 251/254, Loss: 0.0091\n",
            "Epoch 25/25:\n",
            "Train Loss: 0.0035, Train Acc: 99.89%\n",
            "Val Loss: 0.0038, Val Acc: 99.89%\n",
            "------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading best model for evaluation...\n",
            "Test Accuracy: 0.9992\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "Haemorrhagic       1.00      1.00      1.00      7200\n",
            "    Ischemic       1.00      1.00      1.00      7200\n",
            "      Normal       1.00      1.00      1.00      7200\n",
            "\n",
            "    accuracy                           1.00     21600\n",
            "   macro avg       1.00      1.00      1.00     21600\n",
            "weighted avg       1.00      1.00      1.00     21600\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final Test Accuracy: 0.9992\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "A100",
      "mount_file_id": "1rDrbLGcCCGH96TQ8ntbizb12k76d6Jq_",
      "authorship_tag": "ABX9TyMjIuM6zgbILpPv2WzJbV3T",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}